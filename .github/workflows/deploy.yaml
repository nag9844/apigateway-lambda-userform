name: Deploy Serverless Contact Form

on:
  workflow_dispatch:

permissions:
  id-token: write
  contents: read

env:
  AWS_REGION: ap-south-1

jobs:
  terraform-check:
    name: Terraform Check
    runs-on: ubuntu-latest

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3

    - name: Configure AWS Credentials (OIDC)
      uses: aws-actions/configure-aws-credentials@v3
      with:
        role-to-assume: arn:aws:iam::199570228070:role/oidc-demo-role
        aws-region: ${{ env.AWS_REGION }}

    - name: Terraform Format Check
      run: terraform fmt -recursive
      working-directory: ./terraform

    - name: Terraform Init
      run: terraform init
      working-directory: ./terraform

    - name: Terraform Validate
      run: terraform validate
      working-directory: ./terraform

    - name: Terraform Plan
      run: terraform plan -no-color
      working-directory: ./terraform
      env:
        TF_VAR_notification_email: ${{ secrets.NOTIFICATION_EMAIL }}
        TF_VAR_aws_region: ${{ env.AWS_REGION }}

  deploy-infrastructure:
    name: Deploy Infrastructure
    runs-on: ubuntu-latest
    needs: terraform-check

    outputs:
      api_endpoint: ${{ steps.terraform-output.outputs.api_endpoint }}

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_wrapper: false

    - name: Configure AWS Credentials (OIDC)
      uses: aws-actions/configure-aws-credentials@v3
      with:
        role-to-assume: arn:aws:iam::199570228070:role/oidc-demo-role
        aws-region: ${{ env.AWS_REGION }}

    - name: Terraform Init
      run: terraform init
      working-directory: ./terraform

    - name: Terraform Apply
      run: terraform apply -auto-approve -no-color
      working-directory: ./terraform
      env:
        TF_VAR_notification_email: ${{ secrets.NOTIFICATION_EMAIL }}
        TF_VAR_project_name: serverless-contact-form
        TF_VAR_environment: prod
        TF_VAR_aws_region: ${{ env.AWS_REGION }}

    - name: Get Terraform Outputs
      id: terraform-output
      run: |
        API_ENDPOINT=$(terraform output -raw frontend_api_endpoint)
        echo "api_endpoint=$API_ENDPOINT" >> $GITHUB_OUTPUT
        echo "API Endpoint: $API_ENDPOINT"
      working-directory: ./terraform

  deploy-frontend:
    name: Deploy Frontend
    runs-on: ubuntu-latest
    needs: deploy-infrastructure

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Update API Endpoint in HTML
      run: |
        API_ENDPOINT="${{ needs.deploy-infrastructure.outputs.api_endpoint }}"
        echo "Updating API endpoint to: $API_ENDPOINT"
        
        # Replace the API endpoint in index.html
        sed -i "s|const API_ENDPOINT = 'https://your-api-gateway-url.amazonaws.com/prod/contact';|const API_ENDPOINT = '$API_ENDPOINT';|g" index.html
        
        # Verify the change
        grep "const API_ENDPOINT" index.html

    - name: Create dist directory and copy files
      run: |
        mkdir -p dist
        cp index.html dist/
        echo "Files in dist directory:"
        ls -la dist/

    - name: Display deployment info
      run: |
        echo "‚úÖ Frontend prepared successfully!"
        echo "üìç API Endpoint: ${{ needs.deploy-infrastructure.outputs.api_endpoint }}"
        echo "üìÅ Files ready for deployment in 'dist' folder:"
        ls -la dist/
        echo ""
        echo "üöÄ You can now deploy the 'dist/index.html' file to any web hosting service:"
        echo "   - GitHub Pages"
        echo "   - Netlify"
        echo "   - Vercel"
        echo "   - AWS S3 Static Website"
        echo "   - Any web server"

    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: contact-form-html
        path: dist/
        retention-days: 30